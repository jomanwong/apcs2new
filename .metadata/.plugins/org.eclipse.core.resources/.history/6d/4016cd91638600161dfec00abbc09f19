package exercise;

//Joman Wong 9/28/16 APCS2
//Plese ignore the repeated prompt lines when user uses space to seperate the nums, it helps to show the code actually runs for the
//amount of times as there are numbers.

//This program promts the user for "x" amount of numbers to add up, and it adds ONLY even numbers.
//It also displays the biggest and smallest numbers, biggest even number, and sum, of the first "x" amount of numbers
//the user enters.


import java.util.Scanner;
import java.util.ArrayList;
//import java.lang.Math;

public class CumulativeAddition{
  public static void main(String[] args){
      Scanner sc1 = new Scanner(System.in);
      System.out.println("Please enter the numeric value for the amount of numbers:"); // prompts for amount of values
      int xNums = sc1.nextInt();                        //use ArrayList for easier adding
      ArrayList<Integer> numList = new ArrayList<Integer>();                        // keeps track of all values for min, max
      Scanner sc2 = new Scanner(System.in);
      for (int j = 0; j < xNums; j++){
          System.out.println("Please enter the values you want to add up, seperated by the RETURN (ENTER) Key, or spaces:");  // prompts for values to add up
          int num = sc2.nextInt();
          numList.add(num);
      }
      int timesExec = 0;                                      //stores how many times executed
      int maxEven = numList.get(0);                                            //temp value for biggest even number, if any
      int min = numList.get(0);                               //min only exists if the array stores more than 1 value
      int max = numList.get(0);                               // temp value for max
      int sum = 0;
      /*if(numList.size() > 1){                               //numList.size() could be replaced by xNums
          min = numList.get(1);                               //min only exists if the array stores more than 1 value____OBSOLETE
      }else{                                                  // temp value for min___OBSOLETE
          Integer min = null;
      }*/             // OBSOLETE
      for(int i = 1; i < xNums; i ++){                                    // finds max
          if (max < numList.get(i)){
              max = numList.get(i);  
          }
      }
      for(int k = 1; k < xNums; k ++ ){                                    // finds min
          if (min > numList.get(k) && numList.get(k) != 0){
              min = numList.get(k);  
          }
      }
      for(int l = 0; l < xNums; l++){                               //deals with the adding
          //int x = numList.get(l);         //temp value____OBSOLETE
          
          if(numList.get(l) % 2 == 0){                 //checks if even
              sum += numList.get(l);                  //adds ONLY THE EVENS
              timesExec++;                        //tracks if this was ran at all
          }
          if(numList.get(l) % 2 == 0 && numList.get(l) >= maxEven){           //checks if one even is bigger than another
              maxEven = numList.get(l);                                       //sets new biggest even(pos)
          }
          /*if(numList.get(l) % 2 == 0){
              maxEven = numList.get(l);                         //temp value for biggest even number, if any
          }*/
      }
      
      System.out.println();                                           //whitespace
      System.out.println(max + " is the biggest number");               //displays max
      System.out.println(min + " is the smallest mumber");               //displays min
      if(timesExec != 0 ){                                             //checks if there are even numbers
      System.out.println("The sum is " + sum +",  the largest even number is " + maxEven); //displays sum with largest even number, IF THERE ARE EVENS
      }else{
          System.out.println("There were no even numbers to add up.");         //when there are no even numbers
      }
  }
}

