/**
 * 
 * @author Joman Wong
 * @latest edit 12/21/2016 10:42 PM
 * 
 */

package fracCalc;

import java.util.Arrays;
import java.util.Scanner;

public class FracCalc{

	public static void main(String[] args){
		// TODO: Read the input from the user and call produceAnswer with an equation
		//int test = 2;
		System.out.println("========================================================================\n"
						+  "\t\t\t Calculator On\n" 
						+  "========================================================================");
		Scanner in = new Scanner (System.in);
		String userInput = in.nextLine();

		while(!userInput.equals("quit")){                 //keeps prompting until quit
			System.out.println(produceAnswer(userInput));
			userInput = in.nextLine();
			//System.out.println(gcf(produceAnswer(userInput)));
		}
		
		
		//System.out.println("Test: " + test);
		/*	String returnThis;
		//String[] in.split(" ");
		String firstOperand = parseInput("-9035 + 0")[0];
		String operator = parseInput("-9035 + 0")[1]; //determines what calculate function to run
		String secondOperand = parseInput("-9035 + 0")[2];
		int[] ANS = new int[3]; //it is to shorten the return command line, replaces "XFrac(firstOperandAsInt, secondOperandAsInt)"
		int[] temp = new int[3];
		//String toReturn;
		//String operator;

		// operand 1 vars
		int op1Whole = parseOperand(firstOperand)[0];
		int op1Numerator = parseOperand(firstOperand)[1];
		int op1Denominator = parseOperand(firstOperand)[2];
		int[] firstOperandAsInt = {op1Whole, op1Numerator, op1Denominator};

		//operand 2 vars
		int op2Whole = parseOperand(secondOperand)[0];
		int op2Numerator = parseOperand(secondOperand)[1];
		int op2Denominator = parseOperand(secondOperand)[2];
		int[] secondOperandAsInt = {op2Whole, op2Numerator, op2Denominator};

		ANS = addFrac(firstOperandAsInt, secondOperandAsInt);

		System.out.println("op1Whole: " + op1Whole);
		System.out.println("op1Numerator: " + op1Numerator);
		System.out.println("op1Denominator: " + op1Denominator);
		System.out.println("op2whole: " + op2Whole);
		System.out.println("op2Numerator: " + op2Numerator);
		System.out.println("op2denom: " + op2Denominator);
		System.out.println("operator " + operator);
		System.out.println("op1: " + Arrays.toString(parseOperand(firstOperand)));
		System.out.println("op2: " + Arrays.toString(parseOperand(secondOperand)));
		System.out.println("ANS: " + Arrays.toString(ANS));
		System.out.println("T/F: " + testNeg(op1Whole));
		 */

		//System.out.println(produceAnswer("5_3/4 + 6_5/8"));
	}

	// ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
	// This function takes a String 'input' and produces the result
	//
	// input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
	//      e.g. input ==> "1/2 + 3/4"
	//        
	// The function should return the result of the fraction after it has been calculated
	//      e.g. return ==> "1_1/4"

	/*public static boolean testNeg (int in){
		if(in < 0){
			return true;
		}else{
			return false;
		}
	}*/

	public static String produceAnswer(String input){ 
		// TODO: Implement this function to produce the solution to the input
		//stores what operator is in equation, if any. For later use in calculation, 
		//if statement test, as if(operator.equals(" * ") or " / "&& and 1st operand or 2nd .equals 0, returns 0)
		//but for division if divide by 0, returns "ERROR"
	
		//XXX XXX GENERAL VARS LIST HERE XXX XXX	
		String[] splitedInput = parseInput(input);  // split out spaces, so that you will have the operand and operator.
		String operator = splitedInput[1];
		String returnThis;
		
		//XXX Operand 1 Vars
		int[] operand1 = parseOperand(splitedInput[0]);
		int[] impropOP1 = toImproperFrac(operand1);
		
		//XXX Operand 2 Vars
		int[] operand2 = parseOperand(splitedInput[2]);
		int[] impropOP2 = toImproperFrac(operand2);
		
		
		if (operator.equals("+")){
			returnThis = toMixedNum(addFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("-")){
			returnThis = toMixedNum(subtractFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("*")){
			returnThis = toMixedNum(multiplyFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("/")){
			returnThis = toMixedNum(divideFrac(impropOP1, impropOP2));	
		
		}else{
			returnThis = "ERROR";
		}
		
		return returnThis;
		
		
	/*
		
		//XXX Variables here XXX
		String returnThis; //return this
		//String[] in.split(" ");'
		String operator = parseInput(input)[1]; //determines what calculate function to run
		String firstOperand = parseInput(input)[0];
		String secondOperand = parseInput(input)[2];
		int[] ANS = new int[3]; //it is to shorten the return command line, replaces "XFrac(firstOperandAsInt, secondOperandAsInt)"
		int[] temp = new int[3];
		//String toReturn;
		//String operator;

		// operand 1 vars
		int op1Whole = parseOperand(firstOperand)[0];
		int op1Numerator = parseOperand(firstOperand)[1];
		int op1Denominator = parseOperand(firstOperand)[2];
		int[] firstOperandAsInt = {op1Whole, op1Numerator, op1Denominator};

		//operand 2 vars
		int op2Whole = parseOperand(secondOperand)[0];
		int op2Numerator = parseOperand(secondOperand)[1];
		int op2Denominator = parseOperand(secondOperand)[2];
		int[] secondOperandAsInt = {op2Whole, op2Numerator, op2Denominator};

		//call calculations here
		if(operator.equals("+")){ //finds if the operator is +
			ANS = addFrac(firstOperandAsInt, secondOperandAsInt);
			temp = toMixedNum(reduce(toImproperFrac(ANS))); //could be shortened to 1 line and return
			returnThis = whatToPrint(temp);
		}else if(operator.equals("-")){ //finds if the operator is -
			ANS = subtractFrac(firstOperandAsInt, secondOperandAsInt);
			temp = toMixedNum(reduce(toImproperFrac(ANS)));
			returnThis = whatToPrint(temp);
		}else if(operator.equals("*")){ //finds if the operator is *
			ANS = multiplyFrac(firstOperandAsInt, secondOperandAsInt);
			temp = toMixedNum(reduce(toImproperFrac(ANS)));
			returnThis = whatToPrint(temp);
		}else if(operator.equals("/")){ //finds if the operator is /
			ANS = divideFrac(firstOperandAsInt, secondOperandAsInt);
			temp = toMixedNum(reduce(ANS));
			returnThis = whatToPrint(temp);
		}else{
			returnThis = "ERROR"; 
		}
		return returnThis;
		//return "whole:" + op2Whole + " numerator:" + op2Numerator + " denominator:" + op2Denominator; */
	}

	// TODO: Fill in the space below with any helper methods that you think you will need
	/*public static String[] parseInput(String in){

    }*/
	//parse input into 2 operands and an operator, called first
	public static String[] parseInput(String in){
		return in.split(" ");
	} 

	//seperates operand into whole, numer, and demon, called twice, each for 1 operand
	public static int[] parseOperand(String in){
		int[] toReturn = new int [3];
		
		if (in.indexOf("_") < 0 && in.indexOf("/") < 0) {// Integers
			toReturn[0] = Integer.parseInt(in);
			toReturn[1] = 0;
			toReturn[2] = 1;
		}else if(in.indexOf("_") < 0 && in.indexOf("/") > 0 ){	// Improper Fraction			
			toReturn[0] = 0;
			toReturn[1] = Integer.parseInt(in.substring(0, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/") + 1));
		}else if(in.indexOf("_") > 0 && in.indexOf("/") > 0){ //Mixed Number
			toReturn[0] = Integer.parseInt(in.substring(0, in.indexOf("_")));
			toReturn[1] = Integer.parseInt(in.substring(in.indexOf("_") + 1, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/") + 1));
		}
		
		return toReturn;
		
		//String instance = in;

		//XXX VARS HERE XXX
		/*int indexOfUnderscore = in.indexOf("_");
		int indexOfForeSlash = in.indexOf("/");
		//String instance = in.substring(indexOfUnderscore + 1);
		String wholeNum;
		String numerator;
		String denominator;

		int[] arrToReturn = new int[3]; //empty array of length 3, set [0] to whole, [1] to numer, [2] to denom, return this arr

		if(indexOfUnderscore != -1){ //if mixed
			wholeNum = in.substring(0, indexOfUnderscore);
			numerator = in.substring(indexOfUnderscore + 1, indexOfForeSlash);
			denominator = in.substring(indexOfForeSlash + 1);
		}else if(indexOfForeSlash != -1){ //if solo frac
			wholeNum = "0";
			numerator = in.substring(0, indexOfForeSlash);
			denominator = in.substring(indexOfForeSlash + 1);
		}else{ //solo whole number
			wholeNum = in.substring(0);
			numerator = "0";
			denominator = "1";
		}

		arrToReturn[0] = Integer.parseInt(wholeNum);
		arrToReturn[1] = Integer.parseInt(numerator);
		arrToReturn[2] = Integer.parseInt(denominator);
		return arrToReturn;

		//too complicated
		/*if(indexOfUnderscore != -1){
    		wholeNum = in.split("_")[0]; //ex. if in = 5_3/4, this is [5,3/4]
    	}else{
    		wholeNum = "0"; //if the operand has no whole number (5/4)
    	}

    	if(indexOfForeSlash != -1){ //"is it a fraction?"
    		denominator = in.split("/")[1]; //ex. if in = 5_3/4, this is [5_3,(4)]
    		if(indexOfUnderscore == -1){
    			numerator = in.split("/")[0]; //ex. no underscore in in = 3/4, this is []
    		}else{
    			numerator = in.split("/")[0]; //ex. in in = 5_3/4, this is []
    		}
    	}else{
    		denominator = "1"; //if the operand has no fractions (21)
    		numerator = "0";
    	}	*/
	} 

	//addition, calls after parseOperand
	public static int[] addFrac(int[] op1, int[] op2){
		int[] toReturn = new int[2];
		
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = (op1numer * op2denom) + (op1denom * op2numer);
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
		
		/*int[] ans = new int[3]; //whole, numer, denom

		/*if(op1[2] != op2[2]){ //if denoms don't match
			op1[1] = op1[1] * op2[2]; //op1 numer
			op2[1] = op2[1] * op1[2]; //op2 numer
			op1[2] = op1[2] * op2[2]; //op1 denom
		}

		if(op1[1] == 0 && op1[2] == 1 && op2[1] == 0 && op2[2] == 1){ //if both are whole nums
			if(op1[0] < 0){ //if op1whole neg, idk why do i need to do this to make it work, but somehow, this happens, i give up
				if(op2[0] < 0){//if op2whole is also neg
					ans[0] = op2[0] - op1[0];
				}
				ans[0] = op2[0] - op1[0];
			}else{//op1whole is not neg
				  ans[0] = op1[0] + op2[0];
			}
		}

		if(op2[0] < 0){ //if op2 is neg
			ans[0] = op1[0] - op2[0];
		}else if(op1[0] < 0){ 
			ans[0] = op2[0] - op1[0];
		}else{
			ans[0] = op1[0] + op2[0];
		}

		ans[1] = op1[1] + op2[1];
		ans[2] = op1[2];
		ans[0] = op1[0] + op2[0];
		ans[1] = op1[1] * op2[2] + op2[1] * op1[2];
		ans[2] = op1[2] * op2[2];

		return ans; */
	}

	public static int[] subtractFrac(int[] op1, int[] op2){ //subtract
		int[] toReturn = new int[2];
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op2denom * op1numer - op1denom * op2numer;
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}

	public static int[] multiplyFrac(int[] op1, int[] op2){ //multiply
		int [] toReturn = new int[2];
		
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op1numer * op2numer;
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}

	public static int[] divideFrac(int[] op1, int[] op2){ //divide
		int[] toReturn = new int[2];
		
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op1numer * op2denom; //flip over
		toReturn[1] = op1denom * op2denom;
		return toReturn;
	}

	// converts to mixed num, called after improper fracs
	public static String toMixedNum(int[] in){
		String toReturn;
		int factor = gcd(in[0], in[1]);
		if(factor != 1) {
			in[0] = in[0]/factor;	// numer
			in[1] = in[1]/factor;	// denom
		}
		if(in[1]<0){
			in[1]=Math.abs(in[1]);
			in[0]=in[0] * -1;
		}
		int coef = in[0]/in[1];
	  	int remainder = in[0] % in[1];
	 	if (coef<0){
	  		if(remainder==0 && in[1]==1){
	  			toReturn = (Integer.toString(coef));
	 		}else if(remainder == 0 && in[1] == -1){
	 			toReturn = (Integer.toString(coef));
	  		}else{
	  			toReturn = coef + "_" + Math.abs(remainder) + "/" + Math.abs(in[1]);
			}
		}else if(remainder == 0){
			toReturn = coef + "";		
		}else if(coef == 0){			
			if(remainder < 0 && in[1] < 0){
				int tempNumer = remainder * -1;
		  		int tempDenom = in[1] * -1;
		  		toReturn = tempNumer + "/" + tempDenom;
			}else{
				toReturn = remainder + "/" + in[1];
	  		}
		}else if(remainder < 0 && in[1] < 0){
 	    	int numer = remainder * -1;
 			int denom = in[1] * -1;
 			toReturn = coef + "_" + numer + "/" + denom;
		}else{
			toReturn = coef + "_" + remainder + "/" + in[1];
		}
					    		
	   	return toReturn;
		
		/*
		// could call reduce here instead of in produceanswer
		// passes in in[0, improperNumer, denom]
		assert in.length == 3;
		int[] toReturn = new int [3];
		int numer = in[1]; // numer
		int denom = in[2]; // denom
		int remainder = numer % denom; //remainder
		//int w = n / d; //whole num
		//if improper
		if(numer > denom){
			if(numer > 0){ //pos
				toReturn[0] =  (numer - (remainder)) / denom;
				toReturn[1] = remainder;
				toReturn[2] = denom;
			}else{ //neg
				toReturn[0] =  (numer + (remainder)) / denom;
				toReturn[1] = remainder * -1;
				toReturn[2] = denom;
			}
		}else{ //not improper, correct form
			toReturn[0] = 0;
			toReturn[1] = numer;
			toReturn[2] = denom;
		}


		/*if(n > 0){
			if(w == 0){
				toReturn[0] = 0;
				toReturn[1] = ;
				toReturn[2] = ;
			}
		} */
		/*if(a%b == 0){ //if could be simplified into whole
			toReturn[0] = a/b;
			toReturn[1] = 0;
			toReturn[2] = 1;
		}else if (a < b){ //if it is NOT improper
			toReturn[0] = 0;
			toReturn[1] = a;
			toReturn[2] = b;
		}else{  //improper, reduced or not
			toReturn[0] = (a - (a % b))/b ;
			toReturn[1] = a % b ;
			toReturn[2] = b;
		}*/ 
	} 

	// converts to improprt frac for easier calculation
	public static int[] toImproperFrac(int[] in){
		int[] toReturn = new int [2]; //only needs 2 parts as to it's an improper frac
		if(in[0]<0){
			toReturn[0] = (in[0] * in[2]) + (in[1] * -1);
			toReturn[1] = in[2];
		}else{
			toReturn[0] =((in[0] * in[2]) + in[1]);
			toReturn[1] = in[2];
		}
		return toReturn;
	}

	//finds the greatest common factor of numer and denom to reduce a fraction, takes unput from result of toImproperFrac()
	public static int[] reduce(int[] in){ //XXX
		assert in.length == 3;

		int[] toReturn = new int[3]; //reduced input

		int numer = in[1]; // could be simplified, just for the sake of typing it less -- numer
		int denom = in[2]; // could be simplified, just for the sake of typing it less -- denom

		int factor = gcd(numer, denom);
		/*if(a == b){
			factor = a;
		}else if(a == 0 || b == 0){
			factor = b;      //kinda useless here
		}*/
		/*while (b > 0){
            int c = b;
            b = a % b;
            a = c;
        }*/
		toReturn[0] = in[0];
		toReturn[1] = (in[1] / factor);
		toReturn[2] = (in[2] / factor);

		return toReturn;
	} 
	
	//XXX no longer needed as incorperated into other methods
	//decides to print out just a whole number or a fraction
	/*public static String whatToPrint(int[] temp){
		String toReturn;
		if(temp[1] != 0 && temp[2] != 1 && temp[0] !=0){ //if numer and denom are not 0 and 1, and whole numer != 0, prints mixed frac
			toReturn = temp[0] + "_" + temp[1] + "/" + temp[2];
		}else if(temp[1] != 0 && temp[2] != 1 && temp[0] == 0){ //if only numer and denom are not 0 and 1, prints out frac
			toReturn = temp[1] + "/" + temp[2];
		}else{
			toReturn = Integer.toString(temp[0]);
		}
		return toReturn;
	} */
	
	//finds the gcd
	public static int gcd(int a, int b){
		while(a != 0 && b != 0){
			int c = b;
			b = a%b;
			a = c;
		}
		return Math.abs(a + b);
	}
}