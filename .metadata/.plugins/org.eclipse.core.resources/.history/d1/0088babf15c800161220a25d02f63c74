/**
 * 
 * @author Joman Wong
 * @latest edit 12/21/2016 10:42 PM
 * 
 */

package fracCalc;

import java.util.Scanner;

public class FracCalc{

	public static void main(String[] args){
		// TODO: Read the input from the user and call produceAnswer with an equation
		System.out.println("========================================================================\n"
						+  "\t\t\t Calculator On\n" 
						+  "========================================================================");
		Scanner in = new Scanner (System.in);
		String userInput = in.nextLine();

		while(!userInput.equals("quit")){                 //keeps prompting until quit
			System.out.println(produceAnswer(userInput));
			userInput = in.nextLine();
		}
	}

	// ** IMPORTANT ** DO NOT DELETE THIS FUNCTION.  This function will be used to test your code
	// This function takes a String 'input' and produces the result
	//
	// input is a fraction string that needs to be evaluated.  For your program, this will be the user input.
	//      e.g. input ==> "1/2 + 3/4"
	//        
	// The function should return the result of the fraction after it has been calculated
	//      e.g. return ==> "1_1/4"

	/*public static boolean testNeg (int in){ //old test code for help during the making of this code, to see, and later print, the outcome of a method. 
	 * helps to determine if the outcome is expected or unexprected, correct or incorrect.
		if(in < 0){
			return true;
		}else{
			return false;
		}
	}*/

	public static String produceAnswer(String input){ 
		// TODO: Implement this function to produce the solution to the input
		//stores what operator is in equation, if any. For later use in calculation, 
		//if statement test, as if(operator.equals(" * ") or " / "&& and 1st operand or 2nd .equals 0, returns 0)
		//but for division if divide by 0, returns "ERROR"
	
		//XXX XXX GENERAL VARS LIST HERE XXX XXX	
		String[] splitedInput = parseInput(input);  // split out spaces, so that you will have the operand and operator.
		String operator = splitedInput[1];
		String returnThis;
		
		//XXX Operand 1 Vars
		int[] operand1 = parseOperand(splitedInput[0]);
		int[] impropOP1 = toImproperFrac(operand1);
		
		//XXX Operand 2 Vars
		int[] operand2 = parseOperand(splitedInput[2]);
		int[] impropOP2 = toImproperFrac(operand2);
		
		
		if (operator.equals("+")){
			returnThis = toMixedNum(addFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("-")){
			returnThis = toMixedNum(subtractFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("*")){
			returnThis = toMixedNum(multiplyFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("/")){
			returnThis = toMixedNum(divideFrac(impropOP1, impropOP2));	
		
		}else{
			returnThis = "ERROR";
		}
		
		return returnThis;
	}

	// TODO: Fill in the space below with any helper methods that you think you will need
	/*public static String[] parseInput(String in){

    }*/
	//parse input into 2 operands and an operator, called first
	public static String[] parseInput(String in){
		return in.split(" ");
	} 

	//seperates operand into whole, numer, and demon, called twice, each for 1 operand
	public static int[] parseOperand(String in){
		int[] toReturn = new int [3];
		
		if (in.indexOf("_") < 0 && in.indexOf("/") < 0) {// Integers
			toReturn[0] = Integer.parseInt(in);
			toReturn[1] = 0;
			toReturn[2] = 1;
		}else if(in.indexOf("_") < 0 && in.indexOf("/") > 0 ){	// Improper Fraction			
			toReturn[0] = 0;
			toReturn[1] = Integer.parseInt(in.substring(0, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/") + 1));
		}else if(in.indexOf("_") > 0 && in.indexOf("/") > 0){ //Mixed Number
			toReturn[0] = Integer.parseInt(in.substring(0, in.indexOf("_")));
			toReturn[1] = Integer.parseInt(in.substring(in.indexOf("_") + 1, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/") + 1));
		}
		
		return toReturn;
	} 

	//addition, calls after parseOperand
	public static int[] addFrac(int[] op1, int[] op2){
		int[] toReturn = new int[2];
		
		//XXX Vars here
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = (op1numer * op2denom) + (op1denom * op2numer);
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}

	public static int[] subtractFrac(int[] op1, int[] op2){ //subtract
		int[] toReturn = new int[2];
		
		//XXX Vars here
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op2denom * op1numer - op1denom * op2numer;
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}

	public static int[] multiplyFrac(int[] op1, int[] op2){ //multiply
		int [] toReturn = new int[2];
		
		//XXX Vars here
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op1numer * op2numer;
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}

	public static int[] divideFrac(int[] op1, int[] op2){ //divide
		int[] toReturn = new int[2];
		
		//XXX Vars here
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op1numer * op2denom; //flip over
		toReturn[1] = op1denom * op2numer; 
		return toReturn;
	}

	// converts to mixed num, called after improper fracs
	public static String toMixedNum(int[] in){
		//XXX Vars here
		String toReturn;
		int factor = gcd(in[0], in[1]);
		int coef;
		int remainder;
		int tempNumer;
		int tempDenom;
		int returnNumer;
		int returnDenom;
		
		if(factor != 1) {
			in[0] = in[0]/factor;	// numer
			in[1] = in[1]/factor;	// denom
		}
		if(in[1]<0){
			in[1]=Math.abs(in[1]);
			in[0]=in[0] * -1;
		}
		coef = in[0]/in[1];
	  	remainder = in[0] % in[1];
	 	if (coef<0){
	  		if(remainder==0 && in[1]==1){
	  			toReturn = (Integer.toString(coef));
	 		}else if(remainder == 0 && in[1] == -1){
	 			toReturn = (Integer.toString(coef));
	  		}else{
	  			toReturn = coef + "_" + Math.abs(remainder) + "/" + Math.abs(in[1]);
			}
		}else if(remainder == 0){
			toReturn = coef + "";		
		}else if(coef == 0){			
			if(remainder < 0 && in[1] < 0){
				tempNumer = remainder * -1;
		  		tempDenom = in[1] * -1;
		  		toReturn = tempNumer + "/" + tempDenom;
			}else{
				toReturn = remainder + "/" + in[1];
	  		}
		}else if(remainder < 0 && in[1] < 0){
 	    	returnNumer = remainder * -1;
 			returnDenom = in[1] * -1;
 			toReturn = coef + "_" + returnNumer + "/" + returnDenom;
		}else{
			toReturn = coef + "_" + remainder + "/" + in[1];
		}
					    		
	   	return toReturn;
	   	
	} 

	// converts to improprt frac for easier calculation
	public static int[] toImproperFrac(int[] in){
		int[] toReturn = new int [2]; //only needs 2 parts as to it's an improper frac
		
		if(in[0]<0){
			toReturn[0] = (in[0] * in[2]) + (in[1] * -1);
			toReturn[1] = in[2];
		}else{
			toReturn[0] =((in[0] * in[2]) + in[1]);
			toReturn[1] = in[2];
		}
		return toReturn;
	}

	//reduces frac
	public static int[] reduce(int[] in){ //XXX
		assert in.length == 3;

		int[] toReturn = new int[3]; //reduced input

		int numer = in[1]; // numer
		int denom = in[2]; // denom

		int factor = gcd(numer, denom);

		toReturn[0] = in[0];
		toReturn[1] = (in[1] / factor);
		toReturn[2] = (in[2] / factor);

		return toReturn;
	} 
	
	//XXX no longer needed as incorperated into other methods
	//decides to print out just a whole number or a fraction
	/*public static String whatToPrint(int[] temp){
		String toReturn;
		if(temp[1] != 0 && temp[2] != 1 && temp[0] !=0){ //if numer and denom are not 0 and 1, and whole numer != 0, prints mixed frac
			toReturn = temp[0] + "_" + temp[1] + "/" + temp[2];
		}else if(temp[1] != 0 && temp[2] != 1 && temp[0] == 0){ //if only numer and denom are not 0 and 1, prints out frac
			toReturn = temp[1] + "/" + temp[2];
		}else{
			toReturn = Integer.toString(temp[0]);
		}
		return toReturn;
	} */
	
	//finds the gcd
	public static int gcd(int a, int b){
		while(a != 0 && b != 0){
			int c = b;
			b = a%b;
			a = c;
		}
		return Math.abs(a + b);
	}
}