/*
 * Joman Wong
 * 12/20/16 
 * APCS Period 2
*/
package fracCalc;
import java.util.Arrays;
import java.util.Scanner;


public class FracCalc {
	public static void main (String[] args){
		//System.out.println("Insert Your Equation");
		Scanner input  = new Scanner(System.in);
		String userInput = input.nextLine();
		 while (userInput.equals("quit")!= true){
			String answer = produceAnswer(userInput);
			System.out.println(answer);
			userInput = input.nextLine();
		}
		System.out.println("Error, Please Start Over");
	}
	

/* Note : produceAnswer : Parse/split the operands and the operator by parsing/splitting out the spaces
parseOperand : seperates each operand into individual characters
toImproperFrac : changes the operands into improper fractions so that it can be easier to calculate
Check operator --> call to : AddFrac, SuntracFrac, MultipleFrac, DivideFrac
*/

// Note : operandOne stores the operand 1, operandTwo stores the operand 2, improperOperandOne changes operandOne into improp frac, improperOperandTwo changes operandTwo into improp frac.
	
	public static String produceAnswer(String input){
		String[] splitedInput = parseInput(input);  // split out spaces, so that you will have the operand and operator.
		String operator = splitedInput[1];
		String returnThis;
		
		//XXX Operand 1 Vars
		int[] operand1 = parseOperand(splitedInput[0]);
		int[] impropOP1 = toImproperFrac(operand1);
		
		//XXX Operand 2 Vars
		int[] operand2 = parseOperand(splitedInput[2]);
		int[] impropOP2 = toImproperFrac(operand2);
		
		
		if (operator.equals("+")){
			returnThis = toMixedNum(addFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("-")){
			returnThis = toMixedNum(subtractFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("*")){
			returnThis = toMixedNum(multiplyFrac(impropOP1, impropOP2));
		
		}else if(operator.equals("/")){
			returnThis = toMixedNum(divideFrac(impropOP1, impropOP2));	
		
		}else{
			returnThis = "ERROR";
		}
		
		return returnThis;
		
	}
	
	public static String[] parseInput(String in){
		return in.split(" ");
	} 
	
	// Note : Changes operator into Numerator, Denominator, and whole number.
	
	public static int[] parseOperand(String in){

		int[] toReturn = new int [3];
		if (in.indexOf("_") < 0 && in.indexOf("/") < 0) {// Integers
			toReturn[0] = Integer.parseInt(in);
			toReturn[1] = 0;
			toReturn[2] = 1;
		}else if(in.indexOf("_") < 0 && in.indexOf("/") > 0 ){	// Improper Fraction			
			toReturn[0] = 0;
			toReturn[1] = Integer.parseInt(in.substring(0, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/")+1));
		}else if(in.indexOf("_") > 0 && in.indexOf("/") > 0){ //Mixed Number
			toReturn[0] = Integer.parseInt(in.substring(0, in.indexOf("_")));
			toReturn[1] = Integer.parseInt(in.substring(in.indexOf("_") + 1, in.indexOf("/")));
			toReturn[2] = Integer.parseInt(in.substring(in.indexOf("/") + 1));
		}
		
		return toReturn;
	}

//Change mixed number to a improper fraction so that it can be used to calculate
	public static int[] toImproperFrac (int[] in) {
		int[] toReturn = new int [2]; //only needs 2 parts as to it's an improper frac
		if(in[0]<0){
			toReturn[0] = (in[0] * in[2]) + (in[1] * -1);
			toReturn[1] = in[2];
		}else{
			toReturn[0] =((in[0] * in[2]) + in[1]);
			toReturn[1] = in[2];
		}
		return toReturn;
	}
	
// Note :Calls to GCF then checks to see if the numerator can go into the denominator, if the denominator is a negative number or if denominator == -1,0, or 1.
	
	 
	public static String toMixedNum(int[] in) {
		String toReturn;
		int factor = gcd(in[0], in[1]);
		if(factor != 1) {
			in[0] = in[0]/factor;	// numer
			in[1] = in[1]/factor;	// denom
		}
		if(in[1]<0){
			in[1]=Math.abs(in[1]);
			in[0]=in[0] * -1;
		}
		int coef = in[0]/in[1];
	  	int remainder = in[0] % in[1];
	 	if (coef<0){
	  		if(remainder==0 && in[1]==1){
	  			toReturn = (Integer.toString(coef));
	 		}else if(remainder == 0 && in[1] == -1){
	 			toReturn = (Integer.toString(coef));
	  		}else{
	  			toReturn = coef + "_" + Math.abs(remainder) + "/" + Math.abs(in[1]);
			}
		}else if(remainder == 0){
			toReturn = coef + "";		
		}else if(coef == 0){			
			if(remainder < 0 && in[1] < 0){
				int tempNumer = remainder * -1;
		  		int tempDenom = in[1] * -1;
		  		toReturn = tempNumer + "/" + tempDenom;
			}else{
				toReturn = remainder + "/" + in[1];
	  		}
		}else if(remainder < 0 && in[1] < 0){
 	    	int numer = remainder * -1;
 			int denom = in[1] * -1;
 			toReturn = coef + "_" + numer + "/" + denom;
		}else{
			toReturn = coef + "_" + remainder + "/" + in[1];
		}
					    		
	   	return toReturn;
	}	
	
	// Note : GCF --> Greatest Common Factor --> Finds the GCF of the two operands/fractions
	public static int gcd(int a, int b){
		while(a != 0 && b != 0){
			int c = b;
			b = a%b;
			a = c;
		}
		return Math.abs(a + b);
	}
	
		// Note : Find common denominator, then cross multiply the improper fractions, then add up numerators 	
	
	public static int[] addFrac(int[] op1, int[] op2){ 
int[] toReturn = new int[2];
		
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = (op1numer * op2numer) + (op1denom * op2numer);
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}
	
	// Note : Multiply both numerators and denominators
	
	public static int[] multiplyFrac(int[] op1, int[] op2){ 
		int[] toReturn = new int[2];
		
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op1numer * op2numer;
		toReturn[1] = op1denom * op2denom;
		return toReturn;
	}
	
	// Note : Find common denominator,cross multiply then subtract numerators 

	public static int[] subtractFrac(int[] op1, int[] op2){ 
		int[] toReturn = new int[2];
		int op1numer = op1[0];
		int op1denom = op1[1];
		int op2numer = op2[0];
		int op2denom = op2[1];
		
		toReturn[0] = op2denom * op1numer - op1denom * op2numer;
		toReturn[1] = op1denom * op2denom;
		
		return toReturn;
	}
	
	//Reverse the second operand numerator and denominator then multiply
	
	public static int[] divideFrac(int[] operandOne, int[] operandTwo){ 
		int[] answer =new int[2];
		int numerator1 = operandOne[0];
		int denominator1 = operandOne[1];
		int numerator2 = operandTwo[0];
		int denominator2 = operandTwo[1];
		answer[0] = numerator1 * denominator2;
		answer[1] = denominator1 * numerator2;
		return answer;
	}
}